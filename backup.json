{"createdAt":"2025-08-28T18:25:48.283Z","updatedAt":"2025-08-28T20:44:54.000Z","id":"WU20Ek7Jp3Rb44qD","name":"Backup","active":false,"isArchived":false,"nodes":[{"parameters":{},"id":"afb9a206-e8d9-44fb-a5e6-89eeb5ed5cf9","name":"Execute workflow","type":"n8n-nodes-base.manualTrigger","typeVersion":1,"position":[-512,64]},{"parameters":{"options":{}},"id":"1d24235c-b2a3-4446-a639-86dc96ff1b61","name":"Set date","type":"n8n-nodes-base.dateTime","typeVersion":2,"position":[-304,64]},{"parameters":{"operation":"formatDate","date":"={{ $json.currentDate }}","format":"custom","customFormat":"dd-MM-yyyy/H:mm","options":{}},"id":"7e58f7df-457c-40e0-9286-8d7d2f466d7e","name":"Format date","type":"n8n-nodes-base.dateTime","typeVersion":2,"position":[-96,64]},{"parameters":{"resource":"file","operation":"list","owner":{"__rl":true,"value":"={{ $json.repo.owner }}","mode":"name"},"repository":{"__rl":true,"value":"={{ $json.repo.name }}","mode":"name"},"filePath":"="},"id":"1b5d5832-bafe-46a7-af72-07823fb95b50","name":"List files from repository [GITHUB]","type":"n8n-nodes-base.github","typeVersion":1,"position":[320,64],"alwaysOutputData":true,"webhookId":"328b24cf-781c-48ea-8eb2-5b652a8a63bf","credentials":{"githubApi":{"id":"cxrXKwNklLFxRrb6","name":"GitHub account"}}},{"parameters":{"operation":"aggregateItems","fieldsToAggregate":{"fieldToAggregate":[{"fieldToAggregate":"name"}]},"options":{}},"id":"f86aa784-15d9-4be3-869f-da632a9020b1","name":"Combine file names [GITHUB]","type":"n8n-nodes-base.itemLists","typeVersion":2.1,"position":[512,64]},{"parameters":{"filters":{},"requestOptions":{}},"id":"5b84b81a-8a27-4c02-8840-ef16ac33a53b","name":"Retrieve workflows [N8N]","type":"n8n-nodes-base.n8n","typeVersion":1,"position":[720,64],"credentials":{"n8nApi":{"id":"hVtQcrogSbVsgay2","name":"n8n account"}}},{"parameters":{"mode":"jsonToBinary","options":{"fileName":"={{ $json.name.replace(/\\s+/g, '-').toLowerCase() }}.json"}},"id":"05f8510b-6ea7-41d7-8a68-63398f699d41","name":"Move JSON to binary","type":"n8n-nodes-base.moveBinaryData","typeVersion":1,"position":[912,64]},{"parameters":{"batchSize":1,"options":{}},"id":"7706da9d-9f2a-4224-9655-d2d77a5ae885","name":"Split to single items","type":"n8n-nodes-base.splitInBatches","typeVersion":2,"position":[1152,64]},{"parameters":{"resource":"file","operation":"edit","owner":{"__rl":true,"value":"={{ $('Globals').item.json.repo.owner }}","mode":"name"},"repository":{"__rl":true,"value":"={{ $('Globals').item.json.repo.name }}","mode":"name"},"filePath":"={{ $binary.data.fileName }}","binaryData":true,"commitMessage":"=backup-{{ $node['Format date'].json.formattedDate }}"},"id":"5aad518e-f242-4fb2-9cb4-d23df4d83ea6","name":"Update file [GITHUB]","type":"n8n-nodes-base.github","typeVersion":1,"position":[1616,-192],"webhookId":"5bb2ab39-3d3f-406f-bd91-55497df0f3e3","credentials":{"githubApi":{"id":"cxrXKwNklLFxRrb6","name":"GitHub account"}}},{"parameters":{"resource":"file","owner":{"__rl":true,"value":"={{ $('Globals').item.json.repo.owner }}","mode":"name"},"repository":{"__rl":true,"value":"={{ $('Globals').item.json.repo.name }}","mode":"name"},"filePath":"={{ $binary.data.fileName }}","binaryData":true,"commitMessage":"=backup-{{ $node['Format date'].json.formattedDate }}"},"id":"9d8f3ac0-1c8f-4f51-83e1-c7fa15cc7a4d","name":"Upload file [GITHUB]","type":"n8n-nodes-base.github","typeVersion":1,"position":[1648,192],"webhookId":"49107fb4-f47f-46b5-b126-c4de679447b1","credentials":{"githubApi":{"id":"cxrXKwNklLFxRrb6","name":"GitHub account"}}},{"parameters":{"jsCode":"// Code node to detect changes between GitHub file and N8N workflow\n// Place this after getting both the GitHub file content and N8N workflow data\n\nconst orderJsonKeys = (jsonObj) => {\n  if (Array.isArray(jsonObj)) {\n    return jsonObj.map(item => orderJsonKeys(item));\n  } else if (jsonObj !== null && typeof jsonObj === 'object') {\n    const ordered = {};\n    Object.keys(jsonObj).sort().forEach(key => {\n      ordered[key] = orderJsonKeys(jsonObj[key]);\n    });\n    return ordered;\n  }\n  return jsonObj;\n};\n\n// Function to normalize workflow data for comparison\nconst normalizeWorkflow = (workflow) => {\n  // Remove fields that shouldn't affect comparison\n  const normalized = { ...workflow };\n  \n  // Remove metadata that changes frequently but doesn't affect functionality\n  if (normalized.meta) {\n    delete normalized.meta.instanceId;\n  }\n  \n  // Remove version ID as it changes on every save\n  delete normalized.versionId;\n  \n  // Remove active status if you don't want to track it\n  // delete normalized.active;\n  \n  return orderJsonKeys(normalized);\n};\n\n// Debug: Log the input structure to understand the data\nconsole.log('Input data structure:', JSON.stringify($input.all().map(item => Object.keys(item.json)), null, 2));\n\n// Get all input items - we might have multiple inputs\nconst allInputs = $input.all();\nlet currentWorkflow = null;\nlet githubFileData = null;\n\n// Try to identify which input contains the workflow data and which contains GitHub data\nfor (let i = 0; i < allInputs.length; i++) {\n  const item = allInputs[i];\n  \n  // Check if this looks like a workflow (has nodes, connections, etc.)\n  if (item.json && (item.json.nodes || item.json.name)) {\n    currentWorkflow = item.json;\n    console.log(`Found workflow data in input ${i}:`, item.json.name || 'unnamed');\n  }\n  \n  // Check if this looks like GitHub file data (has content, sha, etc.)\n  if (item.json && (item.json.content || item.json.sha || item.json.message)) {\n    githubFileData = item.json;\n    console.log(`Found GitHub data in input ${i}`);\n  }\n}\n\n// Fallback: if we only have one input, assume it contains everything\nif (!currentWorkflow && allInputs.length === 1) {\n  currentWorkflow = allInputs[0].json;\n}\n\n// Validate we have the required data\nif (!currentWorkflow) {\n  throw new Error('Could not find workflow data in inputs');\n}\n\n// Ensure we have a workflow name\nconst workflowName = currentWorkflow.name || `workflow-${currentWorkflow.id || 'unknown'}`;\n\n// Parse GitHub file content if available\nlet githubWorkflow = null;\nlet fileExists = false;\n\nif (githubFileData && githubFileData.content) {\n  try {\n    // Decode base64 content from GitHub\n    const decodedContent = Buffer.from(githubFileData.content, 'base64').toString('utf8');\n    githubWorkflow = JSON.parse(decodedContent);\n    fileExists = true;\n    console.log('Successfully parsed existing GitHub file');\n  } catch (error) {\n    console.log('Error parsing GitHub file content:', error);\n    fileExists = false;\n  }\n} else if (githubFileData && githubFileData.message && githubFileData.message.includes('Not Found')) {\n  // File doesn't exist in GitHub\n  fileExists = false;\n  console.log('File does not exist in GitHub repository');\n} else {\n  console.log('No GitHub file data found - treating as new file');\n  fileExists = false;\n}\n\nlet result = {\n  fileName: workflowName.replace(/\\s+/g, '-').toLowerCase() + '.json',\n  workflowId: currentWorkflow.id || 'unknown',\n  workflowName: workflowName,\n  fileExists: fileExists,\n  hasChanges: false,\n  action: 'skip', // 'create', 'update', or 'skip'\n  workflowData: JSON.stringify(currentWorkflow, null, 2)\n};\n\nif (!fileExists) {\n  // File doesn't exist, needs to be created\n  result.hasChanges = true;\n  result.action = 'create';\n  result.reason = 'File does not exist in repository';\n} else {\n  // File exists, compare content\n  const normalizedCurrent = normalizeWorkflow(currentWorkflow);\n  const normalizedGithub = normalizeWorkflow(githubWorkflow);\n  \n  // Compare the normalized workflows\n  const currentString = JSON.stringify(normalizedCurrent);\n  const githubString = JSON.stringify(normalizedGithub);\n  \n  if (currentString !== githubString) {\n    result.hasChanges = true;\n    result.action = 'update';\n    result.reason = 'Workflow has changes';\n    \n    // Optional: Add detailed change info for debugging\n    result.debug = {\n      currentSize: currentString.length,\n      githubSize: githubString.length,\n      currentNodes: normalizedCurrent.nodes?.length || 0,\n      githubNodes: normalizedGithub.nodes?.length || 0\n    };\n  } else {\n    result.hasChanges = false;\n    result.action = 'skip';\n    result.reason = 'No changes detected';\n  }\n}\n\nreturn result;"},"id":"4b2b656c-b93d-410e-8ff9-f2dc7c864c39","name":"isDiffOrNew","type":"n8n-nodes-base.code","position":[1856,16],"typeVersion":1},{"parameters":{"assignments":{"assignments":[{"id":"6cf546c5-5737-4dbd-851b-17d68e0a3780","name":"repo.owner","type":"string","value":"JaysonGiri"},{"id":"452efa28-2dc6-4ea3-a7a2-c35d100d0382","name":"repo.name","type":"string","value":"n8nBackup"}]},"options":{}},"id":"d1559f50-65ff-4432-8947-0d30f6b699d2","name":"Globals","type":"n8n-nodes-base.set","position":[112,64],"typeVersion":3.4},{"parameters":{"conditions":{"string":[{"value1":"={{ $node['Combine file names [GITHUB]'].json.name }}","operation":"contains","value2":"={{ $binary.data.fileName }}"}]}},"id":"3420d036-212f-43d9-98f3-3af1fd8a8c6d","name":"Check if file exists in repository","type":"n8n-nodes-base.if","typeVersion":1,"position":[1392,48]},{"parameters":{"resource":"file","operation":"edit","owner":{"__rl":true,"value":"={{ $('Globals').item.json.repo.owner }}","mode":"name"},"repository":{"__rl":true,"value":"={{ $('Globals').item.json.repo.name }}","mode":"name"},"filePath":"={{ $binary.data.fileName }}","binaryData":true,"commitMessage":"=backup-{{ $node['Format date'].json.formattedDate }}"},"id":"d95f9837-2bfe-4b07-bf1b-287f6558191a","name":"Get file [GITHUB]1","type":"n8n-nodes-base.github","typeVersion":1,"position":[1632,16],"webhookId":"5bb2ab39-3d3f-406f-bd91-55497df0f3e3","credentials":{"githubApi":{"id":"cxrXKwNklLFxRrb6","name":"GitHub account"}}},{"parameters":{"rules":{"values":[{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"leftValue":"={{ $json.hasChanges }}","rightValue":"","operator":{"type":"boolean","operation":"true","singleValue":true},"id":"a25a7a53-c064-48d9-997d-a6274fb8f40c"}],"combinator":"and"}},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"2e70eaf5-e273-43e3-ba6c-a4441502d693","leftValue":"={{ $json.hasChanges }}","rightValue":"","operator":{"type":"boolean","operation":"false","singleValue":true}}],"combinator":"and"}}]},"options":{}},"type":"n8n-nodes-base.switch","typeVersion":3.2,"position":[2176,16],"id":"f668c0ca-6286-4ca7-aa82-e0776027ba2c","name":"Switch"}],"connections":{"Execute workflow":{"main":[[{"node":"Set date","type":"main","index":0}]]},"Set date":{"main":[[{"node":"Format date","type":"main","index":0}]]},"Format date":{"main":[[{"node":"Globals","type":"main","index":0}]]},"List files from repository [GITHUB]":{"main":[[{"node":"Combine file names [GITHUB]","type":"main","index":0}]]},"Combine file names [GITHUB]":{"main":[[{"node":"Retrieve workflows [N8N]","type":"main","index":0}]]},"Retrieve workflows [N8N]":{"main":[[{"node":"Move JSON to binary","type":"main","index":0}]]},"Move JSON to binary":{"main":[[{"node":"Split to single items","type":"main","index":0}]]},"Split to single items":{"main":[[{"node":"Check if file exists in repository","type":"main","index":0}]]},"Update file [GITHUB]":{"main":[[]]},"Upload file [GITHUB]":{"main":[[{"node":"Split to single items","type":"main","index":0}]]},"isDiffOrNew":{"main":[[{"node":"Switch","type":"main","index":0}]]},"Globals":{"main":[[{"node":"List files from repository [GITHUB]","type":"main","index":0}]]},"Check if file exists in repository":{"main":[[{"node":"Get file [GITHUB]1","type":"main","index":0}],[{"node":"Upload file [GITHUB]","type":"main","index":0}]]},"Get file [GITHUB]1":{"main":[[{"node":"isDiffOrNew","type":"main","index":0}]]},"Switch":{"main":[[{"node":"Split to single items","type":"main","index":0}],[{"node":"Split to single items","type":"main","index":0}]]}},"settings":{"executionOrder":"v1","timezone":"America/Chicago","callerPolicy":"workflowsFromSameOwner"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{},"versionId":"34270b57-528d-43dc-a143-c4522affdeea","triggerCount":0,"tags":[]}