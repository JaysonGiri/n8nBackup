{"createdAt":"2025-08-28T18:25:48.283Z","updatedAt":"2025-08-28T21:05:54.000Z","id":"WU20Ek7Jp3Rb44qD","name":"Backup","active":false,"isArchived":false,"nodes":[{"parameters":{},"id":"afb9a206-e8d9-44fb-a5e6-89eeb5ed5cf9","name":"Execute workflow","type":"n8n-nodes-base.manualTrigger","typeVersion":1,"position":[-512,64]},{"parameters":{"options":{}},"id":"1d24235c-b2a3-4446-a639-86dc96ff1b61","name":"Set date","type":"n8n-nodes-base.dateTime","typeVersion":2,"position":[-304,64]},{"parameters":{"operation":"formatDate","date":"={{ $json.currentDate }}","format":"custom","customFormat":"dd-MM-yyyy/H:mm","options":{}},"id":"7e58f7df-457c-40e0-9286-8d7d2f466d7e","name":"Format date","type":"n8n-nodes-base.dateTime","typeVersion":2,"position":[-96,64]},{"parameters":{"resource":"file","operation":"list","owner":{"__rl":true,"value":"={{ $json.repo.owner }}","mode":"name"},"repository":{"__rl":true,"value":"={{ $json.repo.name }}","mode":"name"},"filePath":"="},"id":"1b5d5832-bafe-46a7-af72-07823fb95b50","name":"List files from repository [GITHUB]","type":"n8n-nodes-base.github","typeVersion":1,"position":[320,64],"alwaysOutputData":true,"webhookId":"328b24cf-781c-48ea-8eb2-5b652a8a63bf","credentials":{"githubApi":{"id":"cxrXKwNklLFxRrb6","name":"GitHub account"}}},{"parameters":{"operation":"aggregateItems","fieldsToAggregate":{"fieldToAggregate":[{"fieldToAggregate":"name"}]},"options":{}},"id":"f86aa784-15d9-4be3-869f-da632a9020b1","name":"Combine file names [GITHUB]","type":"n8n-nodes-base.itemLists","typeVersion":2.1,"position":[512,64]},{"parameters":{"filters":{},"requestOptions":{}},"id":"5b84b81a-8a27-4c02-8840-ef16ac33a53b","name":"Retrieve workflows [N8N]","type":"n8n-nodes-base.n8n","typeVersion":1,"position":[720,64],"credentials":{"n8nApi":{"id":"hVtQcrogSbVsgay2","name":"n8n account"}}},{"parameters":{"mode":"jsonToBinary","options":{"fileName":"={{ $json.name.replace(/\\s+/g, '-').toLowerCase() }}.json"}},"id":"05f8510b-6ea7-41d7-8a68-63398f699d41","name":"Move JSON to binary","type":"n8n-nodes-base.moveBinaryData","typeVersion":1,"position":[912,64]},{"parameters":{"batchSize":1,"options":{}},"id":"7706da9d-9f2a-4224-9655-d2d77a5ae885","name":"Split to single items","type":"n8n-nodes-base.splitInBatches","typeVersion":2,"position":[1152,64]},{"parameters":{"resource":"file","operation":"edit","owner":{"__rl":true,"value":"={{ $('Globals').item.json.repo.owner }}","mode":"name"},"repository":{"__rl":true,"value":"={{ $('Globals').item.json.repo.name }}","mode":"name"},"filePath":"={{ $binary.data.fileName }}","binaryData":true,"commitMessage":"=backup-{{ $node['Format date'].json.formattedDate }}"},"id":"5aad518e-f242-4fb2-9cb4-d23df4d83ea6","name":"Update file [GITHUB]","type":"n8n-nodes-base.github","typeVersion":1,"position":[1616,-192],"webhookId":"5bb2ab39-3d3f-406f-bd91-55497df0f3e3","credentials":{"githubApi":{"id":"cxrXKwNklLFxRrb6","name":"GitHub account"}}},{"parameters":{"resource":"file","owner":{"__rl":true,"value":"={{ $('Globals').item.json.repo.owner }}","mode":"name"},"repository":{"__rl":true,"value":"={{ $('Globals').item.json.repo.name }}","mode":"name"},"filePath":"={{ $binary.data.fileName }}","binaryData":true,"commitMessage":"=backup-{{ $node['Format date'].json.formattedDate }}"},"id":"9d8f3ac0-1c8f-4f51-83e1-c7fa15cc7a4d","name":"Upload file [GITHUB]","type":"n8n-nodes-base.github","typeVersion":1,"position":[1776,400],"webhookId":"49107fb4-f47f-46b5-b126-c4de679447b1","credentials":{"githubApi":{"id":"cxrXKwNklLFxRrb6","name":"GitHub account"}}},{"parameters":{"jsCode":"const orderJsonKeys = (jsonObj) => {\n  const ordered = {};\n  Object.keys(jsonObj).sort().forEach(key => {\n    ordered[key] = jsonObj[key];\n  });\n  return ordered;\n}\n\n// DEBUG: Log what we're actually receiving\nconsole.log(\"=== DEBUG: Input Analysis ===\");\nconsole.log(\"Current input keys:\", Object.keys($input.first().json));\nconsole.log(\"Current input:\", JSON.stringify($input.first().json, null, 2));\n\n// Check what nodes are available\nconsole.log(\"Available node references:\");\ntry {\n  const n8nData = $(\"Retrieve workflows [N8N]\").first().json;\n  console.log(\"N8N workflow name:\", n8nData.name);\n  console.log(\"N8N workflow keys:\", Object.keys(n8nData));\n} catch (e) {\n  console.log(\"Error accessing N8N data:\", e.message);\n}\n\n// Get the data\nconst githubFileData = $input.first().json;\nlet n8nWorkflow;\n\ntry {\n  n8nWorkflow = $(\"Retrieve workflows [N8N]\").first().json;\n} catch (e) {\n  console.log(\"Cannot access N8N node, trying alternative...\");\n  // Alternative: maybe the N8N data is in the current input\n  n8nWorkflow = githubFileData;\n}\n\nlet result = {\n  WorkflowName: n8nWorkflow?.name || 'unknown-workflow',\n  WorkflowId: n8nWorkflow?.id || 'unknown-id',\n  Status: \"\",\n  Action: \"skip\",\n  Reason: \"\",\n  WorkflowData: JSON.stringify(n8nWorkflow, null, 2),\n  // DEBUG fields\n  Debug_HasContent: !!githubFileData.content,\n  Debug_HasMessage: !!githubFileData.message,\n  Debug_Message: githubFileData.message || 'no message',\n  Debug_GitHubKeys: Object.keys(githubFileData),\n  Debug_ContentLength: githubFileData.content ? githubFileData.content.length : 0\n};\n\nconsole.log(\"=== DEBUG: GitHub File Analysis ===\");\nconsole.log(\"GitHub data keys:\", Object.keys(githubFileData));\nconsole.log(\"Has content:\", !!githubFileData.content);\nconsole.log(\"Has message:\", !!githubFileData.message);\nconsole.log(\"Message:\", githubFileData.message);\n\n// Check if file exists in GitHub repository\nif (githubFileData.content && githubFileData.content.length > 0) {\n  try {\n    console.log(\"Attempting to decode GitHub content...\");\n    // Decode base64 content and parse JSON\n    const githubWorkflow = JSON.parse(Buffer.from(githubFileData.content, 'base64').toString());\n    console.log(\"Successfully decoded GitHub workflow:\", githubWorkflow.name);\n    \n    // Order JSON objects for fair comparison\n    const orderedGithub = orderJsonKeys(githubWorkflow);\n    const orderedN8n = orderJsonKeys(n8nWorkflow);\n\n    // Compare the workflows\n    if (JSON.stringify(orderedGithub) === JSON.stringify(orderedN8n)) {\n      result.Status = \"Same\";\n      result.Action = \"skip\";\n      result.Reason = \"No changes detected\";\n      console.log(\"Workflows are identical\");\n    } else {\n      result.Status = \"Different\";\n      result.Action = \"update\";\n      result.Reason = \"Workflow has changes\";\n      console.log(\"Workflows are different\");\n    }\n  } catch (error) {\n    console.log(\"Error parsing GitHub file:\", error.message);\n    result.Status = \"Error\";\n    result.Action = \"update\";\n    result.Reason = `Error parsing GitHub file: ${error.message}`;\n  }\n} else if (githubFileData.message && (\n  githubFileData.message.includes('Not Found') || \n  githubFileData.message.includes('not found') ||\n  githubFileData.message.includes('404')\n)) {\n  console.log(\"File not found in GitHub\");\n  result.Status = \"New\";\n  result.Action = \"create\";\n  result.Reason = \"File does not exist in repository\";\n} else {\n  console.log(\"Unknown GitHub file state\");\n  console.log(\"GitHub response:\", JSON.stringify(githubFileData, null, 2));\n  result.Status = \"Unknown\";\n  result.Action = \"create\";\n  result.Reason = \"Unable to determine file status - no content or clear error message\";\n}\n\nconsole.log(\"=== DEBUG: Final Result ===\");\nconsole.log(\"Action:\", result.Action);\nconsole.log(\"Status:\", result.Status);\nconsole.log(\"Reason:\", result.Reason);\n\nreturn result;"},"id":"4b2b656c-b93d-410e-8ff9-f2dc7c864c39","name":"isDiffOrNew","type":"n8n-nodes-base.code","position":[2128,16],"typeVersion":1},{"parameters":{"assignments":{"assignments":[{"id":"6cf546c5-5737-4dbd-851b-17d68e0a3780","name":"repo.owner","type":"string","value":"JaysonGiri"},{"id":"452efa28-2dc6-4ea3-a7a2-c35d100d0382","name":"repo.name","type":"string","value":"n8nBackup"}]},"options":{}},"id":"d1559f50-65ff-4432-8947-0d30f6b699d2","name":"Globals","type":"n8n-nodes-base.set","position":[112,64],"typeVersion":3.4},{"parameters":{"conditions":{"string":[{"value1":"={{ $node['Combine file names [GITHUB]'].json.name }}","operation":"contains","value2":"={{ $binary.data.fileName }}"}]}},"id":"3420d036-212f-43d9-98f3-3af1fd8a8c6d","name":"Check if file exists in repository","type":"n8n-nodes-base.if","typeVersion":1,"position":[1392,48]},{"parameters":{"resource":"file","operation":"edit","owner":{"__rl":true,"value":"={{ $('Globals').item.json.repo.owner }}","mode":"name"},"repository":{"__rl":true,"value":"={{ $('Globals').item.json.repo.name }}","mode":"name"},"filePath":"={{ $binary.data.fileName }}","binaryData":true,"commitMessage":"=backup-{{ $node['Format date'].json.formattedDate }}"},"id":"d95f9837-2bfe-4b07-bf1b-287f6558191a","name":"Get file [GITHUB]1","type":"n8n-nodes-base.github","typeVersion":1,"position":[1632,16],"webhookId":"5bb2ab39-3d3f-406f-bd91-55497df0f3e3","credentials":{"githubApi":{"id":"cxrXKwNklLFxRrb6","name":"GitHub account"}}},{"parameters":{"rules":{"values":[{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"leftValue":"={{ $json.hasChanges }}","rightValue":"","operator":{"type":"boolean","operation":"true","singleValue":true},"id":"a25a7a53-c064-48d9-997d-a6274fb8f40c"}],"combinator":"and"}},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"2e70eaf5-e273-43e3-ba6c-a4441502d693","leftValue":"={{ $json.hasChanges }}","rightValue":"","operator":{"type":"boolean","operation":"false","singleValue":true}}],"combinator":"and"}}]},"options":{}},"type":"n8n-nodes-base.switch","typeVersion":3.2,"position":[2688,32],"id":"f668c0ca-6286-4ca7-aa82-e0776027ba2c","name":"Switch"},{"parameters":{"url":"={{ $json.content.download_url }}","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[1840,16],"id":"cc23e6f6-033a-4a68-b822-c09007178ce2","name":"HTTP Request"}],"connections":{"Execute workflow":{"main":[[{"node":"Set date","type":"main","index":0}]]},"Set date":{"main":[[{"node":"Format date","type":"main","index":0}]]},"Format date":{"main":[[{"node":"Globals","type":"main","index":0}]]},"List files from repository [GITHUB]":{"main":[[{"node":"Combine file names [GITHUB]","type":"main","index":0}]]},"Combine file names [GITHUB]":{"main":[[{"node":"Retrieve workflows [N8N]","type":"main","index":0}]]},"Retrieve workflows [N8N]":{"main":[[{"node":"Move JSON to binary","type":"main","index":0}]]},"Move JSON to binary":{"main":[[{"node":"Split to single items","type":"main","index":0}]]},"Split to single items":{"main":[[{"node":"Check if file exists in repository","type":"main","index":0}]]},"Update file [GITHUB]":{"main":[[]]},"Upload file [GITHUB]":{"main":[[{"node":"Split to single items","type":"main","index":0}]]},"isDiffOrNew":{"main":[[{"node":"Switch","type":"main","index":0}]]},"Globals":{"main":[[{"node":"List files from repository [GITHUB]","type":"main","index":0}]]},"Check if file exists in repository":{"main":[[{"node":"Get file [GITHUB]1","type":"main","index":0}],[{"node":"Upload file [GITHUB]","type":"main","index":0}]]},"Get file [GITHUB]1":{"main":[[{"node":"HTTP Request","type":"main","index":0}]]},"Switch":{"main":[[{"node":"Split to single items","type":"main","index":0}],[{"node":"Split to single items","type":"main","index":0}]]},"HTTP Request":{"main":[[{"node":"isDiffOrNew","type":"main","index":0}]]}},"settings":{"executionOrder":"v1","timezone":"America/Chicago","callerPolicy":"workflowsFromSameOwner"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{},"versionId":"a06b27a2-9c79-4e5b-a250-3f27490ef66b","triggerCount":0,"tags":[]}